<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logoPictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAOEAAADhCAMAAAAJbSJIAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
        MAAA6mAAADqYAAAXb5JfxUYAAAMAUExURf///wAiVf8AAAAARAAASQAgVO7v8QAaUQAASgAOTf9bW46V
        pwAARwAdUgAXUAAESgASTquywP/ExCs7ZNbc5P/W1kJVelJhgQAQTQAIS7y/yQAAQgAjWllpiPT2+HuG
        neTo7hwxXs/S2TRHbpKarA0rXMnO2Gx4kp6mt8HH0d7i6GVviT5Pc7a8yS5CapigsQAAPYKLoVZjgf/0
        9P+lpf+2tv/Jyf/Y2P/l5f8XF/8mJv88PP9PT/9mZv9vb/+Cgv+RkQAAOBgtW0NDQ0REREVFRUZGRkdH
        R0hISElJSUpKSktLS0xMTE1NTU5OTk9PT1BQUFFRUVJSUlNTU1RUVFVVVVZWVldXV1hYWFlZWVpaWltb
        W1xcXF1dXV5eXl9fX2BgYGFhYWJiYmNjY2RkZGVlZWZmZmdnZ2hoaGlpaWpqamtra2xsbG1tbW5ubm9v
        b3BwcHFxcXJycnNzc3R0dHV1dXZ2dnd3d3h4eHl5eXp6ent7e3x8fH19fX5+fn9/f4CAgIGBgYKCgoOD
        g4SEhIWFhYaGhoeHh4iIiImJiYqKiouLi4yMjI2NjY6Ojo+Pj5CQkJGRkZKSkpOTk5SUlJWVlZaWlpeX
        l5iYmJmZmZqampubm5ycnJ2dnZ6enp+fn6CgoKGhoaKioqOjo6SkpKWlpaampqenp6ioqKmpqaqqqqur
        q6ysrK2tra6urq+vr7CwsLGxsbKysrOzs7S0tLW1tba2tre3t7i4uLm5ubq6uru7u7y8vL29vb6+vr+/
        v8DAwMHBwcLCwsPDw8TExMXFxcbGxsfHx8jIyMnJycrKysvLy8zMzM3Nzc7Ozs/Pz9DQ0NHR0dLS0tPT
        09TU1NXV1dbW1tfX19jY2NnZ2dra2tvb29zc3N3d3d7e3t/f3+Dg4OHh4eLi4uPj4+Tk5OXl5ebm5ufn
        5+jo6Onp6erq6uvr6+zs7O3t7e7u7u/v7/Dw8PHx8fLy8vPz8/T09PX19fb29vf39/j4+Pn5+fr6+vv7
        +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
</value>
  </data>
</root>